#!/usr/bin/env python3
"""
Script para analizar el comportamiento inconsistente del sistema RAG
Simula el problema reportado por Azusena
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.models.vector_db import vector_db
from app.query import query_rag_system
import json
import logging

# Configurar logging para ver detalles
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def analyze_query_behavior(query_text, description):
    """Analiza el comportamiento detallado de una consulta"""
    print(f"\n{'='*80}")
    print(f"üîç AN√ÅLISIS: {description}")
    print(f"üìù CONSULTA: {query_text}")
    print(f"{'='*80}")
    
    # 1. An√°lisis de b√∫squeda vectorial directa
    print("\n1Ô∏è‚É£ B√öSQUEDA VECTORIAL DIRECTA:")
    print("-" * 50)
    
    try:
        # Obtener resultados directos de FAISS
        top_results = vector_db.get_top_results(query_text, top_k=10)
        
        if top_results:
            print(f"‚úÖ Se encontraron {len(top_results)} resultados")
            for i, result in enumerate(top_results[:5], 1):
                data = result['data']
                similarity = result['similarity']
                print(f"   {i}. Art. {data.get('articulo', 'N/A')} - Similitud: {similarity:.4f}")
                print(f"      Tema: {data.get('tema', 'N/A')}")
                print(f"      Subtema: {data.get('subtema', 'N/A')}")
                print(f"      Fuente: {data.get('fuente', 'N/A')}")
                print()
        else:
            print("‚ùå No se encontraron resultados")
    except Exception as e:
        print(f"‚ùå Error en b√∫squeda vectorial: {e}")
    
    # 2. An√°lisis del sistema RAG completo
    print("\n2Ô∏è‚É£ SISTEMA RAG COMPLETO:")
    print("-" * 50)
    
    try:
        response, similarity, used_kb = query_rag_system.query_rag(query_text)
        print(f"‚úÖ Respuesta generada:")
        print(f"   üìä Similitud: {similarity:.4f}")
        print(f"   üìö Us√≥ KB: {used_kb}")
        print(f"   üìÑ Respuesta (primeros 300 chars): {response[:300]}...")
        
        # Analizar la respuesta para detectar inconsistencias
        analyze_response_consistency(query_text, response)
        
    except Exception as e:
        print(f"‚ùå Error en sistema RAG: {e}")
    
    # 3. An√°lisis de art√≠culos espec√≠ficos mencionados
    print("\n3Ô∏è‚É£ VERIFICACI√ìN DE ART√çCULOS MENCIONADOS:")
    print("-" * 50)
    
    # Extraer n√∫meros de art√≠culos de la respuesta
    import re
    if 'response' in locals():
        article_numbers = re.findall(r'art[√≠i]culo\s*(\d+)', response.lower())
        if article_numbers:
            print(f"üìã Art√≠culos mencionados en la respuesta: {article_numbers}")
            for art_num in set(article_numbers):  # Eliminar duplicados
                verify_article_existence(art_num)
        else:
            print("‚ÑπÔ∏è  No se mencionaron art√≠culos espec√≠ficos en la respuesta")

def analyze_response_consistency(query_text, response):
    """Analiza la consistencia de la respuesta con respecto a la consulta"""
    print("\n   üîç AN√ÅLISIS DE CONSISTENCIA:")
    
    query_lower = query_text.lower()
    response_lower = response.lower()
    
    # Verificar consistencia tem√°tica
    if 'calidad' in query_lower:
        if 'calidad' in response_lower:
            print("   ‚úÖ Consistencia tem√°tica: La respuesta menciona 'calidad'")
        else:
            print("   ‚ö†Ô∏è  INCONSISTENCIA: Consulta sobre 'calidad' pero respuesta no la menciona")
    
    # Verificar art√≠culos mencionados
    import re
    query_articles = re.findall(r'art[√≠i]culo\s*(\d+)', query_lower)
    response_articles = re.findall(r'art[√≠i]culo\s*(\d+)', response_lower)
    
    if query_articles:
        print(f"   üìã Art√≠culos en consulta: {query_articles}")
        print(f"   üìã Art√≠culos en respuesta: {response_articles}")
        
        # Verificar si los art√≠culos de la consulta aparecen en la respuesta
        for art in query_articles:
            if art in response_articles:
                print(f"   ‚úÖ Art√≠culo {art} mencionado correctamente")
            else:
                print(f"   ‚ö†Ô∏è  INCONSISTENCIA: Art√≠culo {art} solicitado pero no mencionado en respuesta")

def verify_article_existence(article_number):
    """Verifica si un art√≠culo espec√≠fico existe en la base de datos"""
    try:
        response, similarity, used_kb = vector_db.get_article_details(article_number)
        
        if "‚ùå **Art√≠culo No Encontrado**" in response:
            print(f"   ‚ùå Art√≠culo {article_number}: NO EXISTE en la base de datos")
        else:
            print(f"   ‚úÖ Art√≠culo {article_number}: EXISTE en la base de datos")
            # Extraer informaci√≥n b√°sica
            lines = response.split('\n')
            for line in lines:
                if line.startswith('**Fuente:**'):
                    print(f"      Fuente: {line.replace('**Fuente:**', '').strip()}")
                elif line.startswith('**Tema:**'):
                    print(f"      Tema: {line.replace('**Tema:**', '').strip()}")
                    break
    except Exception as e:
        print(f"   ‚ùå Error verificando art√≠culo {article_number}: {e}")

def simulate_azusena_conversation():
    """Simula la conversaci√≥n problem√°tica reportada con Azusena"""
    print("\n" + "="*100)
    print("ü§ñ SIMULACI√ìN DE CONVERSACI√ìN PROBLEM√ÅTICA CON AZUSENA")
    print("="*100)
    
    # Primera consulta (la original)
    analyze_query_behavior(
        "cuales son los articulos que hablan sobre calidad en la ley 100 del 93",
        "Consulta Original de Azusena"
    )
    
    # Segunda consulta (seguimiento problem√°tico)
    analyze_query_behavior(
        "dame mas detalles sobre esos articulos",
        "Consulta de Seguimiento Problem√°tica"
    )
    
    # Consultas espec√≠ficas para verificar art√≠culos mencionados
    analyze_query_behavior(
        "que dice exactamente el articulo 186 de la ley 100",
        "Verificaci√≥n Art√≠culo 186"
    )
    
    analyze_query_behavior(
        "que dice exactamente el articulo 227 de la ley 100",
        "Verificaci√≥n Art√≠culo 227"
    )

def analyze_context_switching():
    """Analiza por qu√© el sistema cambia de contexto"""
    print("\n" + "="*100)
    print("üîÑ AN√ÅLISIS DE CAMBIO DE CONTEXTO")
    print("="*100)
    
    # Simular consultas secuenciales para ver c√≥mo cambia el contexto
    queries = [
        "cuales son los articulos sobre calidad en la ley 100",
        "dame mas informacion sobre esos articulos",
        "que dice el articulo 186",
        "y el articulo 227",
        "explicame sobre calidad en salud ley 100"
    ]
    
    for i, query in enumerate(queries, 1):
        print(f"\nüî¢ CONSULTA SECUENCIAL {i}:")
        print(f"üìù {query}")
        
        try:
            response, similarity, used_kb = query_rag_system.query_rag(query)
            print(f"üìä Similitud: {similarity:.4f} | KB: {used_kb}")
            print(f"üìÑ Respuesta: {response[:200]}...")
            
            # Extraer art√≠culos mencionados
            import re
            articles = re.findall(r'art[√≠i]culo\s*(\d+)', response.lower())
            if articles:
                print(f"üìã Art√≠culos mencionados: {articles}")
            
        except Exception as e:
            print(f"‚ùå Error: {e}")
        
        print("-" * 80)

def main():
    """Funci√≥n principal"""
    print("üß™ AN√ÅLISIS DETALLADO DEL COMPORTAMIENTO INCONSISTENTE")
    print("="*80)
    
    # 1. Simular la conversaci√≥n problem√°tica
    simulate_azusena_conversation()
    
    # 2. Analizar cambio de contexto
    analyze_context_switching()
    
    # 3. Generar reporte de hallazgos
    print("\n" + "="*100)
    print("üìä RESUMEN DE HALLAZGOS")
    print("="*100)
    
    print("""
    üîç PROBLEMAS IDENTIFICADOS:
    
    1. INCONSISTENCIA EN ART√çCULOS MENCIONADOS:
       - El sistema puede mencionar art√≠culos que no existen en la base de datos
       - Cambio de art√≠culos entre consultas relacionadas
    
    2. P√âRDIDA DE CONTEXTO:
       - Las consultas de seguimiento no mantienen el contexto de la consulta anterior
       - El sistema trata cada consulta como independiente
    
    3. FALTA DE VALIDACI√ìN:
       - No hay verificaci√≥n de que los art√≠culos mencionados existan realmente
       - No hay validaci√≥n de consistencia tem√°tica
    
    4. PROBLEMAS DE RECUPERACI√ìN:
       - Los umbrales de similitud pueden estar causando recuperaci√≥n incorrecta
       - La ponderaci√≥n de similitud puede estar priorizando resultados irrelevantes
    
    üí° RECOMENDACIONES:
    
    1. Implementar validaci√≥n de art√≠culos antes de mencionarlos
    2. Mejorar el manejo de contexto conversacional
    3. A√±adir verificaci√≥n de consistencia tem√°tica
    4. Revisar y ajustar umbrales de similitud
    5. Implementar logging detallado para debugging
    """)

if __name__ == "__main__":
    main()